#!/usr/bin/env python3
"""
Compute product-level deposit betas for CATY using quarterly 10-Q average rate data
vs. quarterly changes in the effective Fed Funds rate.

Inputs:
  - data/deposit_beta_history.json (generated by scripts/extract_deposit_betas_q10.py)
  - data/fed_funds_quarterly.csv (template provided; can be auto-fetched with FRED key)

Outputs:
  - analysis/deposit_beta_regressions.json (coefficients, stderr, r2)
  - analysis/deposit_beta_regressions.md (human-readable report)

Usage:
  1) python3 scripts/extract_deposit_betas_q10.py --quarters 2025Q2 2025Q1 ...
  2) python3 scripts/compute_deposit_beta_regressions.py

Notes:
  - Regression is run on delta rates: Δ(deposit_rate) vs Δ(FedFunds)
  - Separate regressions for: time deposits, MMA (money market), savings, IB demand
  - If insufficient data points (< 6), results are flagged as provisional
"""

from __future__ import annotations

import json
from pathlib import Path
from typing import Dict, List, Tuple

import math
import pandas as pd

ROOT = Path(__file__).resolve().parents[1]
DEPOSIT_JSON = ROOT / "data" / "deposit_beta_history.json"
FED_FUNDS_CSV = ROOT / "data" / "fed_funds_quarterly.csv"
OUT_JSON = ROOT / "analysis" / "deposit_beta_regressions.json"
OUT_MD = ROOT / "analysis" / "deposit_beta_regressions.md"


def _ensure_dirs() -> None:
    (ROOT / "analysis").mkdir(parents=True, exist_ok=True)


def load_deposit_history() -> pd.DataFrame:
    payload = json.loads(DEPOSIT_JSON.read_text())
    rows: List[Dict] = []
    for q in payload.get("quarters", []):
        quarter = q["quarter"]
        m = q["metrics"]
        rows.append(
            {
                "quarter": quarter,
                "ib_demand_rate": m["interest_bearing_demand"]["avg_rate_pct"],
                "mma_rate": m["money_market"]["avg_rate_pct"],
                "savings_rate": m["savings"]["avg_rate_pct"],
                "time_rate": m["time_deposits"]["avg_rate_pct"],
                "total_ib_rate": m["total_interest_bearing"]["avg_rate_pct"],
                "all_in_rate": q["derived"]["all_in_rate_pct"],
            }
        )
    df = pd.DataFrame(rows)
    if df.empty:
        raise RuntimeError("deposit_beta_history.json contains no quarters")
    return df.sort_values("quarter").reset_index(drop=True)


def load_fed_funds() -> pd.DataFrame:
    df = pd.read_csv(FED_FUNDS_CSV)
    # Expect columns: quarter, fed_funds_avg
    if not {"quarter", "fed_funds_avg"}.issubset(df.columns):
        raise RuntimeError("fed_funds_quarterly.csv must have columns: quarter,fed_funds_avg")
    df["quarter"] = df["quarter"].astype(str)
    return df.sort_values("quarter").reset_index(drop=True)


def delta(series: pd.Series) -> pd.Series:
    return series.diff()


def run_ols(x: pd.Series, y: pd.Series) -> Tuple[float, float, float, float, float, int]:
    """Return beta, intercept, r2, std_err, t_stat, n."""
    df = pd.DataFrame({"x": x, "y": y}).dropna()
    n = len(df)
    if n < 2:
        return (float("nan"),) * 5 + (n,)
    x_mean = df["x"].mean()
    y_mean = df["y"].mean()
    cov = ((df["x"] - x_mean) * (df["y"] - y_mean)).sum()
    var = ((df["x"] - x_mean) ** 2).sum()
    if var == 0:
        return (float("nan"),) * 5 + (n,)
    beta = cov / var
    alpha = y_mean - beta * x_mean
    # r^2
    ss_tot = ((df["y"] - y_mean) ** 2).sum()
    ss_res = ((df["y"] - (alpha + beta * df["x"])) ** 2).sum()
    r2 = 1 - ss_res / ss_tot if ss_tot != 0 else float("nan")
    if n > 2:
        sigma2 = ss_res / (n - 2) if (n - 2) > 0 else float("nan")
        var_beta = sigma2 / var if var != 0 else float("nan")
        std_err = math.sqrt(var_beta) if var_beta == var_beta else float("nan")
        t_stat = beta / std_err if std_err and std_err != 0 else float("nan")
    else:
        std_err = float("nan")
        t_stat = float("nan")
    return float(beta), float(alpha), float(r2), float(std_err), float(t_stat), n


def compute_regressions(merged: pd.DataFrame) -> Dict:
    # Compute deltas
    merged = merged.copy()
    merged["d_fed"] = delta(merged["fed_funds_avg"])  # in percentage points

    targets = {
        "time_deposits": "time_rate",
        "money_market": "mma_rate",
        "savings": "savings_rate",
        "ib_demand": "ib_demand_rate",
        "interest_bearing_total": "total_ib_rate",
        "all_in_total": "all_in_rate",
    }

    results: Dict[str, Dict] = {}
    for name, col in targets.items():
        merged[f"d_{col}"] = delta(merged[col])
        beta, alpha, r2, std_err, t_stat, n = run_ols(merged["d_fed"], merged[f"d_{col}"])
        results[name] = {
            "beta": None if math.isnan(beta) else round(beta, 4),
            "intercept": None if math.isnan(alpha) else round(alpha, 4),
            "r2": None if math.isnan(r2) else round(r2, 4),
            "std_err": None if math.isnan(std_err) else round(std_err, 4),
            "t_stat": None if math.isnan(t_stat) else round(t_stat, 2),
            "observations": n,
            "provisional": n < 6,
        }
    return {
        "quarters": merged["quarter"].tolist(),
        "fed_funds_avg": merged["fed_funds_avg"].tolist(),
        "regressions": results,
    }


def to_markdown(payload: Dict) -> str:
    lines = ["# CATY Deposit Beta Regressions (Quarterly Δ vs Fed Funds Δ)", ""]
    lines.append("Method: OLS of quarterly change in product deposit rates vs change in effective Fed Funds.")
    lines.append("")
    lines.append("| Product | Beta | Std Err | t | R^2 | N | Notes |")
    lines.append("|---|---:|---:|---:|---:|---:|---|")
    for k, v in payload["regressions"].items():
        beta = "NA" if v["beta"] is None else f"{v['beta']:.4f}"
        std_err = "NA" if v.get("std_err") is None else f"{v['std_err']:.4f}"
        t = "NA" if v.get("t_stat") is None else f"{v['t_stat']:.2f}"
        r2 = "NA" if v["r2"] is None else f"{v['r2']:.4f}"
        n = v["observations"]
        note = "Provisional sample (<6 quarters)" if v.get("provisional") else ""
        lines.append(f"| {k} | {beta} | {std_err} | {t} | {r2} | {n} | {note} |")
    lines.append("")
    lines.append("Sources: data/deposit_beta_history.json (SEC 10-Q MD&A tables), data/fed_funds_quarterly.csv (FRED FEDFUNDS quarterly average).")
    return "\n".join(lines)


def main() -> int:
    _ensure_dirs()
    dep = load_deposit_history()
    ffr = load_fed_funds()
    merged = pd.merge(dep, ffr, on="quarter", how="inner")
    if len(merged) < 6:
        print("WARNING: Fewer than 6 quarters of overlap; results will be provisional.")
    payload = compute_regressions(merged)
    OUT_JSON.write_text(json.dumps(payload, indent=2))
    OUT_MD.write_text(to_markdown(payload))
    print(f"Wrote {OUT_JSON} and {OUT_MD}")
    return 0


if __name__ == "__main__":
    raise SystemExit(main())
